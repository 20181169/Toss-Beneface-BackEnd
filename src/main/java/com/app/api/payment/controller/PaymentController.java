package com.app.api.payment.controller;

import com.app.api.payment.dto.PaymentDto;
import com.app.api.payment.dto.PaymentFailDto;
import com.app.api.payment.dto.PaymentResDto;
import com.app.api.payment.service.PaymentServiceImpl;
import com.app.domain.member.entity.Member;
import com.app.global.config.TossPaymentConfig;
import com.app.global.resolver.memberInfo.MemberInfo;
import com.app.global.resolver.memberInfo.MemberInfoDto;
import jakarta.validation.Valid;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.apache.catalina.User;
import org.bouncycastle.asn1.ocsp.SingleResponse;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.security.core.annotation.AuthenticationPrincipal;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;

@RestController
@Validated
@Slf4j
@RequiredArgsConstructor
@RequestMapping("/api/v1/payments")
public class PaymentController {
    private final PaymentServiceImpl paymentService;
    private final TossPaymentConfig tossPaymentConfig;

    // Í≤∞Ï†ú ÏöîÏ≤≠ Ï≤òÎ¶¨ (POST)
    @PostMapping("/toss")
    public ResponseEntity requestTossPayment(
            @AuthenticationPrincipal Member principal,
            @RequestBody @Valid PaymentDto paymentReqDto
    ) {
        System.out.println("üîπ Í≤∞Ï†ú ÏöîÏ≤≠ API Ìò∏Ï∂úÎê® - memberId: {}, amount: {}"
        ); // ‚úÖ Î°úÍ∑∏ Ï∂îÍ∞Ä

        // Í≤∞Ï†ú ÏöîÏ≤≠ Ï≤òÎ¶¨
        PaymentResDto paymentResDto = paymentService.requestTossPayment(
                paymentReqDto.toEntity(), principal.getMemberId()
        ).toPaymentResDto();

        // Í≤∞Ï†ú ÏÑ±Í≥µ/Ïã§Ìå® URL ÏÑ§Ï†ï
        paymentResDto.setSuccessUrl(paymentReqDto.getYourSuccessUrl() != null
                ? paymentReqDto.getYourSuccessUrl() : tossPaymentConfig.getSuccessUrl());
        paymentResDto.setFailUrl(paymentReqDto.getYourFailUrl() != null
                ? paymentReqDto.getYourFailUrl() : tossPaymentConfig.getFailUrl());

        log.info("‚úÖ Í≤∞Ï†ú ÏöîÏ≤≠ Ï≤òÎ¶¨ ÏôÑÎ£å - paymentResDto: {}", paymentResDto);

        return ResponseEntity.ok().body(paymentResDto);
    }


    // Í≤∞Ï†ú ÏÑ±Í≥µ Ï≤òÎ¶¨ (GET)
    @GetMapping("/toss/success")
    public ResponseEntity tossPaymentSuccess(
            @RequestParam String paymentKey,
            @RequestParam String orderId,
            @RequestParam Long amount
    ) {

        // Í≤∞Ï†ú ÏÑ±Í≥µ Ï≤òÎ¶¨
        paymentService.tossPaymentSuccess(paymentKey, orderId, amount);

        return ResponseEntity.ok().body("Í≤∞Ï†ú ÏÑ±Í≥µ");
    }

    // Í≤∞Ï†ú Ïã§Ìå® Ï≤òÎ¶¨ (GET)
    @GetMapping("/toss/fail")
    public ResponseEntity tossPaymentFail(
            @RequestParam String code,
            @RequestParam String message,
            @RequestParam String orderId
    ) {
        // Í≤∞Ï†ú Ïã§Ìå® Ï≤òÎ¶¨
        paymentService.tossPaymentFail(code, message, orderId);

        return ResponseEntity.ok().body(
                PaymentFailDto.builder()
                        .errorCode(code)
                        .errorMessage(message)
                        .orderId(orderId)
                        .build()
        );
    }
}

